# 参考下面的链接获得更多的配置信息：
# https://github.com/Nepxion/Discovery/blob/master/discovery-springcloud-example-service/src/main/resources/

# Spring cloud config
middleware.host=localhost

# Nacos config for discovery
spring.cloud.nacos.discovery.server-addr=${middleware.host}:8848

# Consul config for discovery
spring.cloud.consul.host=${middleware.host}
spring.cloud.consul.port=8500

# Eureka config for discovery
eureka.client.serviceUrl.defaultZone=http://${middleware.host}:9528/eureka/

# Nacos config for rule
nacos.server-addr=${middleware.host}:8848

# Apollo config for rule
app.id=discovery
apollo.meta=http://${middleware.host}:8080

# Opentracing config for jaeger
opentracing.jaeger.enabled=true
opentracing.jaeger.http-sender.url=http://${middleware.host}:14268/api/traces

# Ribbon config
ribbon.ConnectTimeout=60000
ribbon.ReadTimeout=60000
ribbon.maxAutoRetries=3
ribbon.maxAutoRetriesNextServer=3
ribbon.okToRetryOnAllOperations=true

# Feign Config
# 解决FeignClientSpecification的问题。支持G版或更高版本的配置，其它版本不需要该行配置
spring.main.allow-bean-definition-overriding=true

# Management config
management.endpoints.web.exposure.include=*
management.endpoints.jmx.exposure.include=*
management.endpoint.health.show-details=ALWAYS
management.metrics.tags.application=${spring.application.name}

# Spring boot admin config
spring.boot.admin.client.instance.prefer-ip=true
spring.boot.admin.client.url=http://${middleware.host}:6002

# ========== 下面的配置，对于一般的业务系统来说，可以全部不需要 ==========
# Plugin strategy config
# 启动和关闭路由策略的时候，对REST方式的调用拦截。缺失则默认为true
spring.application.strategy.rest.intercept.enabled=true
# 启动和关闭Header传递的Debug日志打印，注意每调用一次都会打印一次，会对性能有所影响，建议压测环境和生产环境关闭。缺失则默认为false
spring.application.strategy.rest.intercept.debug.enabled=true
# 灰度路由策略的时候，对REST方式调用拦截的时候（支持Feign或者RestTemplate调用），希望把来自外部自定义的Header参数（用于框架内置上下文Header，例如：trace-id, span-id等）传递到服务里，那么配置如下值。如果多个用“;”分隔，不允许出现空格
spring.application.strategy.context.request.headers=trace-id;span-id
# 灰度路由策略的时候，对REST方式调用拦截的时候（支持Feign或者RestTemplate调用），希望把来自外部自定义的Header参数（用于业务系统子定义Header，例如：mobile）传递到服务里，那么配置如下值。如果多个用“;”分隔，不允许出现空格
spring.application.strategy.business.request.headers=user;mobile
# 启动和关闭路由策略的时候，对RPC方式的调用拦截。缺失则默认为false
spring.application.strategy.rpc.intercept.enabled=true
# 灰度路由策略的时候，需要指定对业务RestController类的扫描路径。此项配置作用于RPC方式的调用拦截、消费端的服务隔离和调用链三项功能
spring.application.strategy.scan.packages=com.nepxion.discovery.guide.service.feign
# 启动和关闭注册的服务隔离（基于Group黑/白名单的策略）。缺失则默认为false
spring.application.strategy.register.isolation.enabled=true
# 启动和关闭消费端的服务隔离（基于Group是否相同的策略）。缺失则默认为false
spring.application.strategy.consumer.isolation.enabled=true
# 启动和关闭提供端的服务隔离（基于Group是否相同的策略）。缺失则默认为false
spring.application.strategy.provider.isolation.enabled=true
# 启动和关闭调用链。缺失则默认为false
spring.application.strategy.trace.enabled=true
# 启动和关闭调用链的日志输出。缺失则默认为false
spring.application.strategy.trace.logger.enabled=true
# 调用链的日志输出中，是否显示MDC前面的Key。缺失则默认为true
# spring.application.strategy.trace.logger.mdc.key.shown=true
# 启动和关闭调用链的Opentracing输出，支持F版或更高版本的配置，其它版本不需要该行配置。缺失则默认为false
spring.application.strategy.trace.opentracing.enabled=true
# 启动和关闭调用链的灰度信息在Opentracing中以独立的Span节点输出，如果关闭，则灰度信息输出到原生的Span节点中。缺失则默认为true
# spring.application.strategy.trace.opentracing.separate.span.enabled=true
# 启动和关闭调用链的灰度规则策略信息在Opentracing中的输出。缺失则默认为true
# spring.application.strategy.trace.opentracing.rule.output.enabled=true
# 启动和关闭调用链的Debug日志打印，注意每调用一次都会打印一次，会对性能有所影响，建议压测环境和生产环境关闭。缺失则默认为false
spring.application.strategy.trace.debug.enabled=true

# 启动和关闭Sentinel限流降级熔断权限等功能。缺失则默认为false
spring.application.strategy.sentinel.enabled=false

# 启动和关闭环境隔离，环境隔离指调用端实例和提供端实例的元数据Metadata环境配置值相等才能调用。缺失则默认为false
spring.application.environment.isolation.enabled=false
# 启动和关闭环境路由，环境路由指在环境隔离下，调用端实例找不到符合条件的提供端实例，把流量路由到一个通用或者备份环境，例如：元数据Metadata环境配置值为common（该值可配置，但不允许为保留值default）。缺失则默认为false
spring.application.environment.route.enabled=false
# 流量路由到指定的环境下。不允许为保留值default，缺失则默认为common
# spring.application.environment.route=common

# 开启和关闭使用服务名前缀来作为服务组名。缺失则默认为false
spring.application.group.generator.enabled=false
# 服务名前缀的截断长度，必须大于0
spring.application.group.generator.length=15
# 服务名前缀的截断标志。当截断长度配置了，则取截断长度方式，否则取截断标志方式
spring.application.group.generator.character=-

# 开启和关闭使用Git信息中的字段单个或者多个组合来作为服务版本号。缺失则默认为false
spring.application.git.generator.enabled=false
# 使用Git信息中的字段单个或者多个组合来作为服务版本号。缺失则默认为{git.commit.time}-{git.total.commit.count}
# spring.application.git.version.key={git.commit.id.abbrev}-{git.commit.time}
# spring.application.git.version.key={git.build.version}-{git.commit.time}
# ========================================================================

# logging.level.com.nepxion.discovery.guide=ERROR